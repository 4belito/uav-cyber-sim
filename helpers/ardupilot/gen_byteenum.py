"""
Generate Enum source file for ArduPilot parameter names as ByteEnum members.

This script parses a local ArduPilot parameter definition file (`apm.pdef.json`),
extracts parameter names matching a given prefix, and generates a `ByteEnum`
class into the `enum/` folder.

It is intended for occasional, developer-triggered use—typically after updating
ArduPilot parameter definitions—rather than regular execution.

Run from the repo root:

    python -m helpers.ardupilot.gen_byteenum

This ensures proper imports like:
    from helpers.codegen import write_init_file

Avoid running directly (e.g., `python gen_byteenum.py`), as it may break imports.
Note: Make sure the __init__.py file exist in the enums folder and is updated.
"""

import json
import os

from helpers.codegen import make_docstring, write_init_file

from .enums.__init__ import __all__ as current_imports

BASE_DIR = os.path.dirname(__file__)
PARAM_PATH = os.path.join(BASE_DIR, "copter_params/apm.pdef.json")


with open(PARAM_PATH, "r") as f:
    params = json.load(f)


PARAM_DEFS = [
    {
        "key": "WPNAV_",
        "group": "",
        "name": "WPNav",
        "doc": "Mission Parameters.",
    },
]


def extract_param_values(key: str, prefix: str) -> list[str]:
    """Extract MAVLink enum values starting with a given prefix."""
    return [k for k in params[key].keys() if k.startswith(prefix)]


def generate_param_enum(
    enum_name: str, docstring: str, param_names: list[str], key: str, group: str
) -> str:
    """Generate source code for a bytes-based Enum class."""
    lines = [
        f'"""{make_docstring(docstring, indent=0)}"""',
        "",
        "from enum import Enum",
        "",
        "",
        f"class {enum_name}(bytes, Enum):",
        make_docstring(
            f"Autogenerated from `{key}` entries starting with `{group}` "
            f"in file {PARAM_PATH}.",
            indent=4,
        ),
        "",
    ]
    for name in param_names:
        shortname = name.removeprefix(key)
        if name.isidentifier():
            lines.append(f'    {shortname} = b"{name}"')
        else:
            sanitized = shortname.replace("-", "_").replace(".", "_")
            lines.append(f'    {sanitized} = b"{name}"  # original name: {name}')
    return "\n".join(lines) + "\n"


def write_param_enum_file(
    name: str, doc: str, param_names: list[str], key: str, group: str, outfile: str
):
    """Write generated bytes-based Enum to file."""
    code = generate_param_enum(name, doc, param_names, key, group)
    os.makedirs(os.path.dirname(outfile), exist_ok=True)
    with open(outfile, "w") as f:
        f.write(code)
    print(f"✅ Param enum written to {outfile}")


if __name__ == "__main__":
    ENUM_DIR = os.path.join(BASE_DIR, "enums")
    for param in PARAM_DEFS:
        outfile = os.path.join(ENUM_DIR, f"{param['name'].lower()}.py")
        values = extract_param_values(param["key"], param["group"])
        write_param_enum_file(
            param["name"],
            param["doc"],
            values,
            param["key"],
            param["group"],
            outfile,
        )

    write_init_file(ENUM_DIR, [e["name"] for e in PARAM_DEFS] + current_imports)
