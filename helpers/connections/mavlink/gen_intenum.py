"""
Generate IntEnum source files for selected MAVLink enums and constants.

This script extracts matching entries from `pymavlink.mavutil` and generates
`IntEnum` classes into the `enums/` folder. It is meant for occasional,
manual use—typically after updating or regenerating MAVLink definitions—rather
than regular execution during normal operation.

Run from the repo root:

    python -m helpers.connections.mavlink.gen_intenum

This ensures proper imports like:
    from helpers.codegen import write_init_file

Avoid running directly (e.g., `python gen_intenum.py`), as it may break imports.
"""

import os

from pymavlink import mavutil

from helpers.codegen import make_docstring, write_init_file

# Define constants to loop over
ENUM_DEFS = [
    {
        "key": "MAV_DATA_STREAM",
        "group": "MAV_DATA_STREAM_",  # No prefix filtering
        "name": "DataStream",
        "doc": "",
    },
    {
        "key": "MAV_TYPE",
        "group": "MAV_TYPE_",  # No prefix filtering
        "name": "Type",
        "doc": "MAVLink data stream types. Used to control telemetry stream rates.",
    },
    {
        "key": "MAV_AUTOPILOT",
        "group": "MAV_AUTOPILOT_",
        "name": "Autopilot",
        "doc": "MAVLink supported autopilot types.",
    },
    {
        "key": "MAV_CMD",
        "group": "MAV_CMD_",
        "name": "Cmd",
        "doc": "MAVLink commands.",
    },
    {
        "key": "MAV_CMD",
        "group": "MAV_CMD_NAV_",
        "name": "CmdNav",
        "doc": "MAVLink commands for navigation.",
    },
    {
        "key": "MAV_CMD",
        "group": "MAV_CMD_DO_",
        "name": "CmdDo",
        "doc": "MAVLink commands for action/control.",
    },
    {
        "key": "MAV_CMD",
        "group": "MAV_CMD_CONDITION_",
        "name": "CmdCond",
        "doc": "MAVLink commands for conditions.",
    },
    {
        "key": "MAV_CMD",
        "group": "MAV_CMD_SET_",
        "name": "CmdSet",
        "doc": "MAVLink commands used for setting parameters or system configuration.",
    },
    {
        "key": "MAV_MODE_FLAG",
        "group": "MAV_MODE_FLAG_",
        "name": "ModeFlag",
        "doc": "MAVLink mode flag codes.",
    },
    {
        "key": "COPTER_MODE",
        "group": "COPTER_MODE_",
        "name": "CopterMode",
        "doc": "MAVLink codes for Copter flight mode.",
    },
    {
        "key": "MAV_PARAM_TYPE",
        "group": "MAV_PARAM_TYPE_",
        "name": "ParamType",
        "doc": "MAVLink codes used in PARAM_VALUE messages.",
    },
    {
        "key": "MAV_LANDED_STATE",
        "group": "MAV_LANDED_STATE_",
        "name": "LandState",
        "doc": "MAVLink codes used to define the aircraft's landed status.",
    },
    {
        "key": "MAV_FRAME",
        "group": "MAV_FRAME_",
        "name": "Frame",
        "doc": "Coordinate frames for position and orientation.",
    },
    {
        "key": "EKF_STATUS_FLAGS",
        "group": "EKF_",
        "name": "EkfStatus",
        "doc": "Bitflags indicating EKF estimator status.",
    },
    {
        "key": "MAV_MODE_FLAG",
        "group": "MAV_MODE_FLAG_",
        "name": "ModeFlag",
        "doc": "Bitmask flags for UAV mode configuration (arming, control, etc).",
    },
    {
        "key": "MAV_MISSION_RESULT",
        "group": "MAV_MISSION_",
        "name": "MissionResult",
        "doc": "MAVLink mission result codes.",
    },
]


ATTR_DEFS = [
    {
        "prefix": "MAVLINK_MSG_ID_",
        "name": "MsgID",
        "doc": "MAVLink message ID constants.",
    },
    {
        "prefix": "MAV_SYS_STATUS_",
        "name": "SensorFlag",
        "doc": "Bitmask flags for onboard sensors (used in SYS_STATUS).",
    },
]


def extract_enum_values(key: str, prefix: str) -> dict[str, int]:
    """Extract MAVLink enum values starting with a given prefix."""
    enum_dict = mavutil.mavlink.enums.get(key)
    if not enum_dict:
        return {}
    return {
        v.name: k
        for k, v in enum_dict.items()
        if hasattr(v, "name") and v.name.startswith(prefix)
    }


def extract_attr_values(prefix: str) -> dict[str, int]:
    """Extract integer attributes from mavutil.mavlink with a given prefix."""
    out: dict[str, int] = {}
    for name in dir(mavutil.mavlink):
        if name.startswith(prefix):
            value = getattr(mavutil.mavlink, name)
            if isinstance(value, int):
                out[name] = value
    return out


def generate_enum_source(
    enum_name: str, docstring: str, values: dict[str, int], key: str, group: str
) -> str:
    """Generate source code for an IntEnum class."""
    class_docs = f"Autogenerated from {key} entries starting with `{group}`."
    lines = [
        f"{make_docstring(docstring, indent=0)}",
        "",
        "from enum import IntEnum",
        "",
        "",
        f"class {enum_name}(IntEnum):",
        f"{make_docstring(class_docs, indent=4)}",
        "",
    ]
    for name, val in sorted(values.items()):
        shortname = name.removeprefix(group)
        lines.append(f"    {shortname} = {val}")
    return "\n".join(lines) + "\n"


def write_enum_file(
    name: str, doc: str, values: dict[str, int], key: str, group: str, outfile: str
):
    """Write generated IntEnum to file."""
    code = generate_enum_source(name, doc, values, key, group)
    os.makedirs(os.path.dirname(outfile), exist_ok=True)
    with open(outfile, "w") as f:
        f.write(code)
    print(f"✅ Enum written to {outfile}")


if __name__ == "__main__":
    base_dir = os.path.join(os.path.dirname(__file__), "enums")

    for enum in ENUM_DEFS:
        outfile = os.path.join(base_dir, f"{enum['name'].lower()}.py")
        values = extract_enum_values(enum["key"], enum["group"])
        write_enum_file(
            enum["name"],
            enum["doc"],
            values,
            enum["key"],
            enum["group"],
            outfile,
        )

    for attr in ATTR_DEFS:
        outfile = os.path.join(base_dir, f"{attr['name'].lower()}.py")
        values = extract_attr_values(attr["prefix"])
        write_enum_file(
            attr["name"],
            attr["doc"],
            values,
            "dir(mavlink)",
            attr["prefix"],
            outfile,
        )
    write_init_file(base_dir, [e["name"] for e in ENUM_DEFS + ATTR_DEFS])
